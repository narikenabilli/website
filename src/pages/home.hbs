---
title: Stacktic - Node.js Static Site Generator
slug: home
description: Node.js Static Site Generator
keywords: "ssg, nodejs static site, static site, static site generator"
---

{{#capture 'hero' }}
<div class="jumbotron">
<div class="container">
<h1 class="logo logo-jumbotron">Stacktic</h1>
<div class="jumbotron-description">
  Node.js Static Site Generator
</div>
<div>
  <a href="getting-started" class="btn btn-jumbotron">Getting Started</a>
</div>
</div>
</div>
<div class="banner">
  <div class="container">
    <div class="row">
      <div class="col-sm-6">
        Current {{version}}<div class="visible-xs"><br/></div>
      </div>
      <div class="col-sm-3">
        <iframe src="http://ghbtns.com/github-btn.html?user=stackticjs&amp;repo=stacktic&amp;type=watch&amp;count=true" allowtransparency="true" frameborder="0" scrolling="0" width="95px" height="20px"></iframe><div class="visible-xs"><br/></div>
      </div>
      <div class="col-sm-3">
        <iframe src="http://ghbtns.com/github-btn.html?user=stackticjs&amp;repo=stacktic&amp;type=fork&amp;count=true" allowtransparency="true" frameborder="0" scrolling="0" width="95px" height="20px"></iframe>        
      </div>
    </div>
  </div>
</div>
{{/capture}}


<div class="home-body">

  <div class="section">
    <div class="section-icon"><i class="fa fa-code"></i></div>
    <h2 class="section-title">MVC</h2>
    <div class="section-content">
      Stacktic mimics the structure of MVC frameworks to separate concerns
{{#md }}
``` js
staktic.model("Post", function(){
  this.dataSource('file', {src: 'posts/**/*'});
});
```

``` js
this.models.Post.sortBy('created_at', 'desc').paginate(10);
```
{{/md}}

    </div>
  </div>

  <div class="section">
    <div class="section-icon"><i class="fa fa-code-fork"></i></div>
    <h2 class="section-title">Routing</h2>
    <div class="section-content">
Control your routes the right way

{{#md }}
``` js
this.route("/:{$slug}/", this.models.Page.reject({$slug: "home"}));
```
{{/md}}

    </div>
  </div>

<div class="section">
    <div class="section-icon"><i class="fa fa-tint"></i></div>
    <h2 class="section-title">Rendering</h2>
    <div class="section-content">
Multiple stackable rendering engines 

{{#md }}
``` js
this.route('/blog/posts/:{$slug}/', 
  model.Posts.sortBy('created_at'))
  .render('md')
  .render('hbs', {layout: 'post'});
```

Layouts, partials, templates and ad-hoc helpers with default Handlebars.js rendering engine

```
<ul class="nav navbar-nav navbar-right">
  \{{#each nav.items }}
    \{{#ifCurrent $path }}
      <li class="active"><a href="\{{$path}}">\{{title}}</a></li>
    \{{else}}
      <li><a href="\{{$path}}">\{{title}}</a></li>
    \{{/ifCurrent}}
  \{{/each}}
</ul>
```

{{/md}}   

    </div>
  </div>


  <div class="section">
    <div class="section-icon"><i class="fa fa-cloud-download"></i></div>
    <h2 class="section-title">Data from everywhere</h2>
    <div class="section-content">
Data are more than just files

{{#md }}
``` js
stacktic
.model("Comment", function() {

  this.dataSource('rest', {
    url: 'http:/api.example.com/comments',
    format: 'json'
  });

  // Validate data from untrusted sources
  this.validate({'author': {presence: true}});
  
  // Adapt data as you wish with callbacks
  this.callback('load:after', function(item){
    item.reliability = item.totalVoters == 0 ? 1 : item.upVoters / item.totalVoters;
  })

  // Create instance methods
  this.prototype.isReliable(function(){
    return this.reliability > 0.5;
  });

  this.parseDates('postedAt');

});

```
{{/md}}
    </div>
  </div>

  <div class="section">
    <div class="section-icon"><i class="fa fa-folder-open"></i></div>
    <h2 class="section-title">Organize your code</h2>
    <div class="section-content">
Keep everithing in the right place

{{#md }}
``` js
var stacktic = require('stacktic');

stacktic({src: 'src', dest: 'dest'})
.use('./src/models/page')
.use('./src/models/post')
.use('./src/models/comment')
.use('./src/controllers/pages')
.use('./src/controllers/blogging')
.build();
```
{{/md}}

Create stack modules for reuse and fast rebuilds

{{#md }}
``` js
module.exports = function(stacktic) {
  stacktic
  .use('./src/models/vendor')
  .use('./src/models/image')
  .use('./src/models/asset')
  .use('./src/models/font')
  .use('./src/controllers/assets')
};

```

``` js
fs.watch('./src/assets', function () {
  stacktic({src: 'src', dest: 'dest'})
  .use('./src/stacks/assets')
  .build();
});
```
{{/md}}

    </div>
  </div>


  <div class="section">
    <div class="section-icon"><i class="fa fa-puzzle-piece"></i></div>
    <h2 class="section-title">Extendible</h2>
    <div class="section-content">
Easily extend Stacktic features through plugins

{{#md }}
``` js
module.exports = function(stacktic) {
  stacktic.Model.buildExcerpt = function(limit) {
    limit = (limit == null) ? 100 : limit;

    this.addCallback('validate:before', function(item) {
      item.$excerpt = item.$content.substr( 0, item.$content.lastIndexOf(' ', limit ) ) + '...';
    });
  };
};
```

``` js
staktic.model("Post", function(){
  this.dataSource('file', {src: 'posts/**/*'});
  this.buildExcerpt(200);
});
```

{{/md}}   

    </div>
  </div>

</div>
<br/>
<div class="text-center">
<a href="getting-started" class="btn btn-primary btn-lg">Getting Started</a>
</div>
